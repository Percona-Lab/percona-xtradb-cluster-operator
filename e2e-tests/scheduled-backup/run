#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

create_namespace $namespace
deploy_operator

desc 'create cluster without backups'
cluster="scheduled-backup-pxc"
kubectl apply \
    -f $conf_dir/secrets.yml \
    -f $conf_dir/client.yml \
    -f $test_dir/conf/${cluster}1.yml
desc 'check if all 3 Pods started'
wait_for_running "$cluster-node" 3
compare_kubectl statefulset/$cluster-node

desc 'write data'
run_mysql \
    'CREATE DATABASE IF NOT EXISTS myApp; use myApp; CREATE TABLE IF NOT EXISTS myApp (id int PRIMARY KEY);' \
    "-h $cluster-nodes -uroot -proot_password"
run_mysql \
    'INSERT myApp.myApp (id) VALUES (100500)' \
    "-h $cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-0.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-1.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-2.$cluster-nodes -uroot -proot_password"

desc 'add backups schedule, wait for the first backup'
kubectl apply \
    -f $test_dir/conf/${cluster}2.yml
sleep 90
compare_kubectl statefulset/$cluster-node
compare_kubectl cronjob/sat-night-backup
compare_kubectl cronjob/each-min
backup1=$(kubectl get pxc-backup -o jsonpath='{.items[0].metadata.name}')

set +o xtrace
echo -n "Waiting."
until kubectl get "pxc-backup/$backup1" -o jsonpath='{.status.state}' 2>/dev/null | grep -q Succeeded; do
    sleep 1
    echo -n .
done
echo "[done]"
set -o xtrace

desc 'write data after backup'
run_mysql \
    'INSERT myApp.myApp (id) VALUES (100501)' \
    "-h $cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-node-0.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-node-1.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-node-2.$cluster-nodes -uroot -proot_password"

desc 'delete backups schedule, wait for job deleting'
kubectl apply \
    -f $test_dir/conf/${cluster}1.yml
compare_kubectl statefulset/$cluster-node
wait_for_delete cronjob/sat-night-backup
wait_for_delete cronjob/each-min

desc 'recover backup'
echo y | $src_dir/deploy/backup/restore-backup.sh $backup1 ${cluster%-pxc}
kubectl logs job/xtrabackup-restore-job-${cluster%-pxc}
kubectl delete job/xtrabackup-restore-job-${cluster%-pxc}
wait_for_running "$cluster-node" 3

desc 'check data after backup'
compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-0.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-1.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-node-2.$cluster-nodes -uroot -proot_password"
run_mysql \
    'INSERT myApp.myApp (id) VALUES (100501)' \
    "-h $cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-node-0.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-node-1.$cluster-nodes -uroot -proot_password"
compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-node-2.$cluster-nodes -uroot -proot_password"

desc 'copy backup'
$src_dir/deploy/backup/copy-backup.sh $backup1 $tmp_dir/backup

destroy $namespace
