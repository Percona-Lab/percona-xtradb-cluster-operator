#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

run_recovery_check() {
    local cluster=$1
    local backup1=$2

    desc 'write data after backup'
    run_mysql \
        'INSERT myApp.myApp (id) VALUES (100501)' \
        "-h $cluster-proxysql -uroot -proot_password"
    compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-pxc-0.$cluster-pxc -uroot -proot_password"
    compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-pxc-1.$cluster-pxc -uroot -proot_password"
    compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h $cluster-pxc-2.$cluster-pxc -uroot -proot_password"

    desc 'recover backup'
    echo y | bash $src_dir/deploy/backup/restore-backup.sh $backup1 ${cluster}
    kubectl logs job/restore-job-${cluster}
    kubectl delete job/restore-job-${cluster}
    wait_for_running "$cluster-proxysql" 1
    wait_for_running "$cluster-pxc" 3

    desc 'check data after backup'
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-pxc-0.$cluster-pxc -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-pxc-1.$cluster-pxc -uroot -proot_password"
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-pxc-2.$cluster-pxc -uroot -proot_password"

    desc 'copy backup'
    bash $src_dir/deploy/backup/copy-backup.sh $backup1 $tmp_dir/backup
}

check_scheduled_backup() {
    local cluster=$1
    local storage=$2

    compare_kubectl cronjob/each-min-${storage}
    backup_name=$(
        kubectl get pxc-backup -o=jsonpath='{range .items[*]}{.metadata.name}{":"}{.spec.storageName}{"\n"}{end}' \
            | grep ":$storage" \
            | tail -1 \
            | cut -d ':' -f 1
    )

    wait_backup $backup_name
    run_recovery_check "$cluster" "$backup_name"
}

main() {
    create_namespace $namespace
    deploy_operator
    kubectl apply -f $conf_dir/cloud-secret.yml

    cluster="scheduled-backup"
    spinup_pxc "$cluster" "$test_dir/conf/${cluster}1.yml"

    desc 'add backups schedule, wait for the first backup'
    kubectl apply -f $test_dir/conf/${cluster}2.yml
    sleep 90

    check_scheduled_backup "$cluster" "pvc"

    #run_recovery_check "$cluster" "on-demand-backup-aws-s3"

    #run_recovery_check "$cluster" "on-demand-backup-minio"

    #run_recovery_check "$cluster" "on-demand-backup-gcp-cs"

    destroy $namespace
}

main
