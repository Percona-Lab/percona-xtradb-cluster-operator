#!/bin/bash

set -o errexit
set -o xtrace

test_dir=$(realpath $(dirname $0))
. ${test_dir}/../functions

spinup_pxc_without_tls() {
  local cluster=$1
  local config=$2
  local size="${3:-3}"
  local sleep="${4:-10}"

  desc 'create first PXC cluster'
  kubectl_bin apply \
    -f $test_dir/conf/secrets.yml

  apply_config "$conf_dir/client.yml"
  apply_config "$config"

  desc 'check if all 3 Pods started'
  local proxy=$(get_proxy "$cluster")
  wait_for_running "$proxy" 1
  wait_for_running "$cluster-pxc" "$size"
  sleep $sleep

  desc 'write data'
  if [[ "$IMAGE_PXC" =~ 5\.7 ]] && [[ "$(is_keyring_plugin_in_use "$cluster")" ]]; then
    encrypt='ENCRYPTION=\"Y\"'
  fi
  run_mysql \
    "CREATE DATABASE IF NOT EXISTS myApp; use myApp; CREATE TABLE IF NOT EXISTS myApp (id int PRIMARY KEY) $encrypt;" \
    "-h $proxy -uroot -proot_password"
  run_mysql \
    'INSERT myApp.myApp (id) VALUES (100500)' \
    "-h $proxy -uroot -proot_password"
  sleep 10
  for i in $(seq 0 $(($size - 1))); do
    compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h $cluster-pxc-$i.$cluster-pxc -uroot -proot_password"
  done

  if [ "$(is_keyring_plugin_in_use "$cluster")" ]; then
    table_must_be_encrypted "$cluster" "myApp"
  fi
}


getSecretData() {
  local secretName=$1
  local dataKey=$2
  local data=$(kubectl get secrets/${secretName} -o json | jq '.data["'${dataKey}'"]')
  echo "$data"
}

checkTLSFiles() {
  for var in '$@'; do
    if [ -z "$var" ]; then
      echo 'cant find required tls file'
      exit 1
    fi
  done
}

checkTLSSecrets() {
  crt={$(getSecretData some-name-ssl 'ca.crt'):-''}
  tlsCert={$(getSecretData some-name-ssl 'tls.crt'):-''}
  tlsKey={$(getSecretData some-name-ssl 'tls.key'):-''}

  checkTLSFiles $crt $tlsCert $tlsKey
}

main() {
  create_infra $namespace
  cluster="some-name"

  desc 'deploy cert manager'
  deploy_cert_manager

  desc 'create issuer'

  cat "$test_dir/conf/issuer.yml" | sed -e "s/test/$namespace/g" | kubectl_bin apply -f -

  desc 'create pxc cluster'
  spinup_pxc_without_tls "$cluster" "$test_dir/conf/$cluster.yml"

  desc 'check if certificates issued with certmanager'
  checkTLSSecrets

  desc 'check if issuer created'
  kubectl_bin describe issuer special-selfsigned-issuer

  issuerName=$(kubectl_bin get certificate some-name-ssl -o json | jq '.spec.issuerRef.name')
  
  if [ "$issuerName" != '"special-selfsigned-issuer"' ]; then
    echo 'invalid issuer'
    exit 1
  fi

  destroy $namespace
}

main
